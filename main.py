import matplotlib.pyplot as plt
import numpy as np
from wrapper import printTableWithGraph
from math import e
from scipy import interpolate as itp

########################################################

# lab 1
# график заданной функции, полинома Лагранжа, сплайн-функции
# fig = plt.figure(figsize=(6, 10))
#
# ax1 = fig.add_subplot(3, 1, 1)
# ax2 = fig.add_subplot(3, 1, 2)
# ax3 = fig.add_subplot(3, 1, 3)
#
# x1 = np.linspace(0.1, 2.1)
# y1 = pow(1 + pow(e, x1), -1)
# x2 = [0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5, 1.7, 1.9, 2.1]
# y2 = [0.47502082, 0.42555748, 0.37754067, 0.33181223, 0.28905050, 0.24973989, 0.21416502, 0.18242552, 0.15446526,
#       0.13010850, 0.10909691]
# x3 = [0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5, 1.7, 1.9, 2.1]
# y3 = [0.47323989, 0.42583357, 0.37746722, 0.33183259, 0.28904563, 0.24974222, 0.21416353, 0.18243160, 0.15444432,
#       0.13018745, 0.10920080]
#
# ax1.plot(x1, y1)
# ax2.plot(x2, y2)
# ax3.plot(x3, y3)
#
# ax1.set_title('заданная функция')
# ax2.set_title('полином Лагранжа')
# ax3.set_title('сплайн-функция')
#
# ax1.grid(linewidth=1.2)
# ax2.grid(linewidth=1.2)
# ax3.grid(linewidth=1.2)
#
# fig.tight_layout(pad=1)
# fig.show()
#
# #график подынтегральной функции
# fig1 = plt.figure(figsize=(6, 10))
# ax = fig1.add_subplot()
# x = np.linspace(0, 1)
# y = 1 / (pow(x - 0.1, 2) + pow(10, -6))
# ax.plot(x, y)
# ax.set_title('график подынтегральной функции')
# fig1.show()

########################################################

# lab 2
# x1 = [133, 1211, 12009, 119974, 1198366, 12582909, 100663296]
# x2 = [0.1, 0.01, 0.001, 0.0001, 1e-5, 1e-6, 1e-7]
# y1 = [5014, 44550.7, 440467, 4399151, 43940211, 463373111, 3690991111]
# y2 = [abs(5014 - 5239.44), abs(44550.7 - 44110.8), abs(440467 - 444703), abs(4399151 - 4440700),
#       abs(43940211 - 444007000), abs(463373111 - 444001000), abs(3690991111 - 4440000000)]
#
# fig1 = plt.figure()
# ax1 = fig1.add_subplot()
# plt.xscale('log')
# plt.yscale('log')
# ax1.set_xlabel('||R||')
# ax1.set_ylabel('cond')
# plt.xlim([133, 100663297])
# plt.ylim([5014, 3690991111])
# ax1.plot(x1, y1)
# ax1.grid(linewidth=1.2)
# fig1.show()
#
# fig2 = plt.figure()
# ax2 = fig2.add_subplot()
# plt.xscale('linear')
# plt.yscale('log')
# ax2.set_xlabel('alpha')
# ax2.set_ylabel('cond delta')
# ax2.plot(x2, y2)
# ax2.grid(linewidth=1.2)
# fig2.show()

########################################################

# lab3
# y_rkf45_75 = [2, 1.26111867, 0.9589370317, 0.7442945794, 0.5827632234, 0.4600109093, 0.3659830592, 0.2932640922,
#               0.2363662024, 0.1912282688, 0.15484663, 0.1250022315, 0.1000588943, 0.07881405102, 0.06038813234,
#               0.04414242366, 0.02961788204, 0.01648942502, 0.00453166064, -0.006406890909, -0.01642324864]
# y_rk3_75 = [2, 0.4854642252, 2.47010368, -2.282016834, 6.633092034, -11.6427802, 24.56961688, -48.11572273, 97.0528606,
#             -193.4430102, 387.4222822, -774.4107276, 1549.170816, -3098.063272, 6196.344097, -12392.52365, 24785.1649,
#             -49570.25432, 99140.54594, -198281.0894, 396562.1494]
# y_rk3_57 = [2, 1.075278176, 1.246916681, 0.784783627, 0.8067045163, 0.5652693302, 0.5398622561, 0.4071157609,
#             0.372220287, 0.2949618651, 0.2629168675, 0.2150937309, 0.1887114614, 0.1571186995, 0.136033234, 0.113735737,
#             0.09680234121, 0.08003662997, 0.06615331451, 0.05282471955, 0.0411510358]
# x_75 = [0, 0.075, 0.15, 0.225, 0.3, 0.375, 0.45, 0.525, 0.6, 0.675, 0.75, 0.825, 0.9, 0.975, 1.05, 1.125, 1.2, 1.275,
#         1.35, 1.425, 1.5]
# # x_65 = [0, 0.057, 0.114, 0.171, 0.228, 0.285, 0.342, 0.399, 0.456, 0.513, 0.57, 0.627, 0.684, 0.741, 0.798, 0.855,
# #         0.912, 0.969, 1.026, 1.083, 1.14]
#
# y_rk3_75_err = []
# y_rk3_57_err = []
#
# for i in range(0, 21):
#     y_rk3_75_err.append(abs(y_rkf45_75[i] - y_rk3_75[i]))
#     y_rk3_57_err.append(abs(y_rkf45_75[i] - y_rk3_57[i]))
#
# tck1, myu1 = itp.splprep([x_75, y_rk3_57_err])
# xnew1, ynew1 = itp.splev(np.linspace(0, 1), tck1)
# fig1 = plt.figure()
# ax1 = fig1.add_subplot()
# ax1.grid(linewidth=1.2)
# ax1.plot(xnew1, ynew1)
# ax1.set_xlabel('x')
# ax1.set_ylabel('error')
# fig1.show()
#
# fig2 = plt.figure()
# ax2 = fig2.add_subplot()
# ax2.grid(linewidth=1.2)
# ax2.plot(x_75, y_rk3_75_err)
# ax2.set_xlabel('x')
# ax2.set_ylabel('error')
# fig2.show()

########################################################